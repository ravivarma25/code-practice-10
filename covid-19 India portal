const express = require("express");
const path = require("path");

const { open } = require("sqlite");
const sqlite3 = require("sqlite3");
const app = express();
app.use(express.json());
const bcrypt = require("bcrypt");
const jwt = require("jsonwebtoken");

const dbPath = path.join(__dirname, "covid19IndiaPortal.db");

let database = null;

const initializeDBAndServer = async () => {
  try {
    database = await open({
      filename: dbPath,
      driver: sqlite3.Database,
    });
    app.listen(3000, () => {
      console.log("Server Running at http://localhost:3000/");
    });
  } catch (e) {
    console.log(`DB Error: ${e.message}`);
    process.exit(1);
  }
};

initializeDBAndServer();

const convertStateTableToResponseObject = (dbObject) => {
  return {
    stateId: dbObject.state_id,
    stateName: dbObject.state_name,
    population: dbObject.population,
  };
};

const convertDistrictTableToResponseObject = (dbObject) => {
  return {
    districtId: dbObject.district_id,
    districtName: dbObject.district_name,
    stateId: dbObject.state_id,
    cases: dbObject.cases,
    cured: dbObject.cured,
    active: dbObject.active,
    deaths: dbObject.deaths,
  };
};

function authenticationToken(request, response, next) {
  let jwtToken;
  const authHead = request.headers["authorization"];
  if (authHead !== undefined) {
    jwtToken = authHead.split(" ")[1];
  }
  if (jwtToken === undefined) {
    response.status(401);
    response.send("Invalid JWT Token");
  } else {
    jwt.verify(jwtToken, "MY_SECRET_TOKEN", async (error, payload) => {
      if (error) {
        response.status(401);
        response.send("Invalid JWT Token");
      } else {
        next();
      }
    });
  }
}

app.post("/login/", async (request, response) => {
  const { username, password } = request.body;
  const selectUserQuery = `SELECT * FROM user WHERE username = "${username}";`;
  const databaseUser = await database.run(selectUserQuery);
  if (databaseUser === undefined) {
    response.status(401);
    response.send("Invalid user");
  } else {
    const isPasswordMatched = await bcrypt.compare(
      password,
      databaseUser.password
    );
    if (isPasswordMatched === true) {
      const payload = { username: username };
      const jwtToken = jwt.sign(payload, "MY_SECRET_TOKEN");
      response.send({ jwtToken });
    }else{
        response.status(400);
        response.send("Invalid password");
    }
  }
});

app.get("/states/", authenticationToken, async (request, response) => {
    const getStateQuery =`
    SELECT * 
    FROM state;`;
    const stateArray = await database.all(getStateQuery);
    response.send(stateArray.map((eachObject) => convertStateTableToResponseObject(eachObject)));
});

app.get("/states/:stateId/", authenticationToken, async (request, response) => {
    const { stateId } = request.params;
    const getStateQuery =`
    SELECT * 
    FROM state
    WHERE state_id = ${sateId};`;
    const state = await database.get(getStateQuery);
    response.send(convertStateTableToResponseObject(state)));
});

app.post("/districts/", authenticationToken, async (request, response) =>{
    const { stateId, districtName, cases, cured, active, deaths } = request.body;
    const postDistrictQuery=`
    INSERT INTO 
    district (state_id, district_name, cases, cured, active, deaths)
    VALUES 
    (${stateId}, "${districtName}", ${cases}, ${cured}, ${active}, ${deaths});`;
    await database.run(postDistrictQuery);
    response.send("District Successfully Added");
});

app.get("/districts/:districtId/", authenticationToken, async (request, response) =>{
    const { districtId } = request.params;
    const getDistrictQuery = `
    SELECT * 
    FROM 
    district 
    WHERE 
    district_id = ${districtId};`;
    const district = await database.get(getDistrictQuery);
    response.send(convertDistrictTableToResponseObject(district));
});

app.delete("/districts/:districtId/", authenticationToken, async (request, response) =>{
    const { districtId } = request.params;
    const deleteDistrictQuery = `
    DELETE FROM 
    district 
    WHERE 
    district_id = ${districtId};`;
    await database.run(deleteDistrictQuery);
    response.send("District Removed");
});

app.put("/districts/:districtId/", authenticationToken, async (request, response) =>{
    const { districtId } = request.params;
    const { districtName, stateId, cases, cured, active, deaths } = request.body;
    const updateDistrictQuery = `
    UPDATE
    district
    SET district_name = "${districtName}", 
    sate_id = ${stateId}, 
    cases = ${cases}, 
    cured = ${cured}, 
    active = ${active}, 
    deaths = ${deaths}
    WHERE district_id = ${districtId};`;
    await database.run(updateDistrictQuery);
    response.send("District Details Updated");
});

app.get("/districts/:districtId/", authenticationToken, async (request, response) =>{
    const { stateId } = request.params;
    const statisticsDistrictQuery = `
    SELECT 
    SUM(cases),
    SUM(cured),
    SUM(active),
    SUM(deaths)
    FROM district
    WHERE state_id = ${stateId};`;
    const state = await database.get(statisticsDistrictQuery);
    response.send({
        totalCases: state["SUM(cases)"],
        totalCured: state["SUM(cured)"],
        totalActive: state["SUM(active)"],
        totalDeaths: state["SUM(deaths)"],
    });
});
